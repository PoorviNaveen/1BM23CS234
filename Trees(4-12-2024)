TREES - 4/12/2024
Program:
#include<stdio.h>
#include<stdlib.h>
struct tree{
    int data;
    struct tree *left;
    struct tree *right;
};
struct tree *createnode(int data){
    struct tree *newnode=(struct tree*)malloc(sizeof(struct tree));
    newnode->data=data;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;
}
struct tree *insert(struct tree *root, int data){
    if(root == NULL){
        root = createnode(data);
    }
    if(data< root->data){
        root->left = insert(root->left, data);
    }else if(data> root->data){
        root->right = insert(root->right, data);
    }
    return root;
}
void inorder(struct tree *root){
    if(root != NULL){
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
void preorder(struct tree *root){
    if(root != NULL){
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct tree *root){
    if(root != NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}
int main(){
    int option, data;
    struct tree *root = NULL;
    while(1){
        printf("1. Insert\n2. Inorder\n3. Preorder\n4. Postorder\n5. Exit \n");
        scanf("%d", &option);
        switch(option){
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                root = insert(root, data);
                break;
            case 2:
                printf("Inorder traversal : ");
                inorder(root);
                printf("/n");
                break;
            case 3:
                printf("Preorder traversal : ");
                preorder(root);
                printf("/n");
                break;
            case 4:
                printf("Postorder traversal : ");
                postorder(root);
                printf("/n");
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("Invalid option\n");
        }
    }
}
OUTPUT:
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 50
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 40
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 30
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 20
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 70
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 60
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
1
Enter data: 75
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
2
Inorder traversal : 20 30 40 50 60 70 75 /n1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
3
Preorder traversal : 50 40 30 20 70 60 75 /n1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
4
Postorder traversal : 20 30 40 60 75 70 50 /n1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
5

Process returned 0 (0x0)   execution time : 30.104 s
Press any key to continue.
